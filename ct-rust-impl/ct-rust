#!/usr/bin/env python3

import typer
from ct_rust_lib.tree_sitter_builder import build_language_library
from ct_rust_lib.function_processor import extract_functions
from pathlib import Path
from ct_rust_lib.function_import_analyzer import analyze_function_imports
from ct_rust_lib.import_updater import update_imports_in_directory
from ct_rust_lib.node_type_finder import find_node_types
from ct_rust_lib.splitter import split_file
from ct_rust_lib.test_module_appender import TestModuleAppender


app = typer.Typer()

try:
    build_language_library()
except Exception as e:
    typer.echo(f"Error: {e}")


from ct_rust_lib.models import FunctionImportAnalysis  # Import the new dataclass

@app.command("analyze-imports")
def analyze_imports(
    file_path: str = typer.Argument(..., help="Path to the Rust file")
):
    """
    Analyze which imports are used by which functions in a Rust file.
    """
    try:
        file_path_obj = Path(file_path)
        if not file_path_obj.is_file():
            raise ValueError(f"{file_path} is not a valid file.")

        analysis = analyze_function_imports(file_path)  # Updated to return a dataclass

        # Print results
        for function, imports in analysis.function_imports.items():
            typer.echo(f"{function}")
            for imp in imports:
                typer.echo(f"-> {imp}")
            typer.echo("")

        if analysis.unknown_imports:
            typer.echo("unknown")
            for imp in analysis.unknown_imports:
                typer.echo(f"-> {imp}")
    except Exception as e:
        typer.echo(f"Error: {e}")

@app.command("extract-functions")
def extract_functions_cmd(
    file_path: str = typer.Argument(..., help="Path to the Rust file"),
    pub_only: bool = typer.Option(True, help="If true, return only public functions"),
):
    """
    Extract function names from a Rust file using tree-sitter.
    """
    try:
        build_language_library()
        functions = extract_functions(file_path, pub_only)
        if functions:
            typer.echo("\n".join(functions))
        else:
            typer.echo("No functions found.")
    except Exception as e:
        typer.echo(f"Error: {e}")


from ct_rust_lib.mod_rs_creator import generate_and_write_mod_rs

@app.command("create-mod-rs")
def create_mod_rs(
    dir_str: str = typer.Argument(..., help="Path to the directory containing .rs files"),
):
    """
    Create a mod.rs file that includes all .rs files in the directory and re-exports public functions.
    """
    try:
        dir_path: Path = Path(dir_str)
        mod_file_path = generate_and_write_mod_rs(dir_path)
        typer.echo(f"mod.rs created successfully at {mod_file_path}")
    except Exception as e:
        typer.echo(f"Error: {e}")


@app.command("redo-import")
def redo_import(
    old_import: str = typer.Argument(..., help="The old import to be replaced."),
    new_import: str = typer.Argument(..., help="The new import to replace with."),
    dir_path: str = typer.Argument(..., help="Path to the directory containing .rs files."),
):
    """
    Replace all instances of an old import with a new one across all .rs files in a directory.
    """
    try:
        updated_files = update_imports_in_directory(Path(dir_path), old_import, new_import)
        if updated_files:
            typer.echo(f"Updated imports in {len(updated_files)} file(s):")
            for file in updated_files:
                typer.echo(f"- {file}")
        else:
            typer.echo("No imports were updated.")
    except Exception as e:
        typer.echo(f"Error: {e}")

@app.command("node-type")
def node_type_cmd(
    file_path: str = typer.Argument(..., help="Path to the Rust file"),
    name: str = typer.Argument(..., help="Name to search for (variable, trait, etc.)"),
):
    """
    Print node types corresponding to the given name in the Rust file.
    
    Example:
        ct-rust node-type <input-file.rs> InputLinksConfig
    """
    try:
        file_path_obj = Path(file_path)
        if not file_path_obj.is_file():
            raise ValueError(f"{file_path} is not a valid file.")

        node_types = find_node_types(file_path, name)

        if node_types:
            for node_type in node_types:
                typer.echo(f"{name}: {node_type}")
        else:
            typer.echo(f"No node types found for '{name}' in {file_path}.")
    except Exception as e:
        typer.echo(f"Error: {e}")

@app.command("split-file")
def split_file_cmd(
    file_path: str = typer.Argument(..., help="Path to the Rust file to split."),
    output_dir: str = typer.Option(".", help="Directory to place the split files."),
):
    """
    Split a Rust file into separate files for each function, including necessary imports.
    
    Example:
        ct-rust split-file links_processing.rs --output-dir ./split_files
    """
    try:
        file_path_obj = Path(file_path)
        output_dir_obj = Path(output_dir)

        if not file_path_obj.is_file():
            raise ValueError(f"{file_path} is not a valid file.")

        if not output_dir_obj.exists():
            output_dir_obj.mkdir(parents=True, exist_ok=True)

        split_file(file_path_obj, output_dir_obj)

        typer.echo(f"File '{file_path}' has been split into individual function files in '{output_dir}'.")
    except Exception as e:
        typer.echo(f"Error: {e}")

@app.command("append-test-mod")
def append_test_mod(
    file_path: str = typer.Argument(..., help="Path to the Rust file to append the test module."),
):
    """
    Append an empty test module shell at the end of a Rust .rs file for unit tests.
    
    Example:
        ct-rust append-test-mod src/lib.rs
    """
    try:
        appender = TestModuleAppender(file_path)
        appended = appender.append_test_module()
        if appended:
            typer.echo(f"Test module appended successfully to '{file_path}'.")
        else:
            typer.echo(f"Test module already exists in '{file_path}'. No changes made.")
    except Exception as e:
        typer.echo(f"Error: {e}")

if __name__ == "__main__":
    app()
