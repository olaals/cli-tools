#!/usr/bin/env python3

import pandas as pd
from pathlib import Path
import typer
from typing import List

app = typer.Typer()

@app.command()
def columns(file_path: Path) -> None:
    """
    List columns in a Parquet file with their types.
    """
    try:
        df = pd.read_parquet(file_path)
        typer.echo("Columns in the Parquet file with types:")
        for column, dtype in df.dtypes.items():
            typer.echo(f"{column}: {dtype}")
    except Exception as e:
        typer.echo(f"An error occurred: {e}")

@app.command()
def unique(file_path: Path, column_name: str) -> None:
    """
    List unique values within a column in a Parquet file.
    """
    try:
        df = pd.read_parquet(file_path)
        unique_values = df[column_name].dropna().unique()
        typer.echo(f"Unique values in column '{column_name}':")
        for value in unique_values:
            typer.echo(value)
    except Exception as e:
        typer.echo(f"An error occurred: {e}")

@app.command()
def head(file_path: Path, num_rows: int = typer.Option(5, help="Number of rows to display. Default is 5")) -> None:
    """
    Print the first few rows of a Parquet file.
    """
    typer.echo(f"First {num_rows} rows of the Parquet file:")
    try:
        df = pd.read_parquet(file_path)
        typer.echo(df.head(num_rows))
    except Exception as e:
        typer.echo(f"An error occurred: {e}")

@app.command()
def memory_usage(file_path: Path) -> None:
    """
    Print the memory usage of each column in the DataFrame in megabytes,
    along with the total memory usage.
    """
    try:
        df = pd.read_parquet(file_path)
        memory_usage_bytes = df.memory_usage(deep=True)
        typer.echo("Memory usage by columns (in MB):")
        total_memory_usage_bytes = 0
        for column, bytes_used in memory_usage_bytes.items():
            mb_used = bytes_used / 1e6
            typer.echo(f"{column}: {mb_used:.2f} MB")
            total_memory_usage_bytes += bytes_used
        total_memory_usage_mb = total_memory_usage_bytes / 1e6
        typer.echo(f"Total memory usage: {total_memory_usage_mb:.2f} MB")
    except Exception as e:
        typer.echo(f"An error occurred: {e}")


@app.command()
def filter(file_path: Path, column_value_pairs: List[str] = typer.Argument(...)) -> None:
    """
    Print rows based on specified column-value filters of a Parquet file.
    """
    try:
        if len(column_value_pairs) % 2 != 0:
            raise ValueError("Please provide an even number of arguments, specifying columns and their corresponding values.")
        
        df = pd.read_parquet(file_path)
        query_string = " & ".join([f"`{column_value_pairs[i]}` == '{column_value_pairs[i + 1]}'" for i in range(0, len(column_value_pairs), 2)])
        filtered_df = df.query(query_string)
        
        if filtered_df.empty:
            typer.echo("No rows match the specified filters.")
        else:
            typer.echo(filtered_df)
    except Exception as e:
        typer.echo(f"An error occurred: {e}")


if __name__ == "__main__":
    app()
